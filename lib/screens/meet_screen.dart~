import 'dart:async';

import 'package:flutter/material.dart';
import 'package:vidstream/services/meet_service.dart';
import 'package:vidstream/models/api_models.dart';
import 'package:vidstream/screens/chat_screen.dart';
import '../services/socket_manager.dart';
import '../widgets/custom_image_widget.dart';

class MeetScreen extends StatefulWidget {
  const MeetScreen({super.key});

  @override
  State<MeetScreen> createState() => _MeetScreenState();
}

class _MeetScreenState extends State<MeetScreen> {
  bool _hasJoinedMeet = false;
  bool _isLoading = false;
  List<ApiUser> _onlineUsers = [];
  String _selectedGenderFilter = 'all';
  final MeetService _meetService = MeetService();
  late final StreamSubscription _meetEventSub;

  @override
  void initState() {
    super.initState();
    _meetEventSub = eventBus.on<MeetEvent>().listen((event) {
      if (!mounted) return;
      if (event.type == MeetEventType.joined) {
        _loadOnlineUsers();
      } else if (event.type == MeetEventType.left) {
        setState(() {
          _onlineUsers.removeWhere((u) => u.userId == event.userId);
        });
      }
    });
  }

  Future<void> _loadOnlineUsers() async {
    if (!_hasJoinedMeet) return;
    
    setState(() {
      _isLoading = true;
    });

    try {
      final stream = _meetService.getNearbyUsersStream(genderFilter: _selectedGenderFilter);
      final users = await stream.first;
      setState(() {
        _onlineUsers = users;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error loading online users: $e')),
        );
      }
    }
  }

  void _onGenderFilterChanged(String filter) {
    setState(() {
      _selectedGenderFilter = filter;
    });
    _loadOnlineUsers();
  }

  Future<void> _joinMeet() async {
    setState(() {
      _isLoading = true;
    });

    try {
      await _meetService.joinMeet();
      setState(() {
        _hasJoinedMeet = true;
        _isLoading = false;
      });
      _loadOnlineUsers();
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error joining meet: $e')),
        );
      }
    }
  }

  Future<void> _leaveMeet() async {
    setState(() {
      _isLoading = true;
    });

    try {
      await _meetService.leaveMeet();
      setState(() {
        _hasJoinedMeet = false;
        _onlineUsers.clear();
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error leaving meet: $e')),
        );
      }
    }
  }

  void _startChat(ApiUser user) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ChatScreen(otherUserId: user.userId, name: user.displayName,imageUrl: user.profileImageUrl ,),
      ),
    );
  }

  String _getGenderDisplayName(String gender) {
    switch (gender) {
      case 'male':
        return 'Male';
      case 'female':
        return 'Female';
      case 'other':
        return 'Other';
      default:
        return 'All';
    }
  }

  void _showGenderFilterBottomSheet() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Theme.of(context).colorScheme.onSecondary,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (BuildContext context) {
        return Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Filter by Gender',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 12),
              RadioListTile<String>(
                title: const Text('All Users'),
                value: 'all',
                groupValue: _selectedGenderFilter,
                onChanged: (value) {
                  Navigator.of(context).pop();
                  _onGenderFilterChanged(value!);
                },
              ),
              RadioListTile<String>(
                title: const Text('Male'),
                value: 'male',
                groupValue: _selectedGenderFilter,
                onChanged: (value) {
                  Navigator.of(context).pop();
                  _onGenderFilterChanged(value!);
                },
              ),
              RadioListTile<String>(
                title: const Text('Female'),
                value: 'female',
                groupValue: _selectedGenderFilter,
                onChanged: (value) {
                  Navigator.of(context).pop();
                  _onGenderFilterChanged(value!);
                },
              ),
              RadioListTile<String>(
                title: const Text('Other'),
                value: 'other',
                groupValue: _selectedGenderFilter,
                onChanged: (value) {
                  Navigator.of(context).pop();
                  _onGenderFilterChanged(value!);
                },
              ),
              const SizedBox(height: 8),
              Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('Cancel'),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  void dispose() {
    _meetEventSub.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Meet'),
        backgroundColor: Theme.of(context).scaffoldBackgroundColor,
        elevation: 0,
        actions: _hasJoinedMeet
            ? [
          _buildFilterIconButton(context),
          IconButton(
            onPressed: _leaveMeet,
            icon: const Icon(Icons.exit_to_app),
            tooltip: 'Leave Meet',
          ),
        ]
            : [],
      ),
      body: _hasJoinedMeet ? _buildMeetContent() : _buildJoinPrompt(),
    );
  }

  Widget _buildJoinPrompt() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(32),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(20),
              ),
              child: Icon(
                Icons.videocam,
                size: 80,
                color: Theme.of(context).colorScheme.primary,
              ),
            ),
            const SizedBox(height: 32),
            Text(
              'Join Meet',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Connect with other users online and start chatting',
              textAlign: TextAlign.center,
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 32),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: _isLoading ? null : _joinMeet,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: _isLoading
                    ? const SizedBox(
                        height: 20,
                        width: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Text('Join Meet'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMeetContent() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_onlineUsers.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.people_outline,
              size: 64,
              color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.5),
            ),
            const SizedBox(height: 16),
            Text(
              'No users online',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.7),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Check back later to see online users',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.5),
              ),
            ),
          ],
        ),
      );
    }

    // Users are already sorted by the API

    return RefreshIndicator(
      onRefresh: _loadOnlineUsers,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                if (_selectedGenderFilter != 'all')
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.3),
                      ),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.filter_list,
                          size: 16,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                        const SizedBox(width: 4),
                        Text(
                          _getGenderDisplayName(_selectedGenderFilter),
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Theme.of(context).colorScheme.primary,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ],
                    ),
                  ),
              ],
            ),
            const SizedBox(height: 8),
            Expanded(
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final spacing = 8 * (2 - 1);
                  final itemWidth = (constraints.maxWidth - spacing - 32) / 2;
                  final itemHeight = itemWidth / 0.8;

                  return GridView.builder(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2,
                      crossAxisSpacing: 12,
                      mainAxisSpacing: 12,
                      childAspectRatio: itemWidth / itemHeight,
                    ),
                    itemCount: _onlineUsers.length,
                    itemBuilder: (context, index) {
                      final user = _onlineUsers[index];
                      return _buildUserCard(user, itemWidth, itemHeight);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildUserCard(ApiUser user, double itemWidth, double itemHeight) {
    return GestureDetector(
      onTap: () => _startChat(user),
      child: Container(
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(12),
          child: Stack(
            fit: StackFit.expand,
            children: [
              // Profile Image
              user.profileImageUrl != null
                  ? CustomImageWidget(
                imageUrl: user.profileImageUrl!,
                height: itemHeight,
                width: itemWidth,
                cornerRadius: 12,
              )
                  : Container(
                height: itemHeight,
                width: itemWidth,
                color: Theme.of(context).colorScheme.primary.withAlpha(25),
                child: Icon(
                  Icons.person,
                  size: itemHeight * 0.4,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
              // Bottom overlay with gradient
              Positioned(
                bottom: 0,
                left: 0,
                right: 0,
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 12),
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.only(
                      bottomLeft: Radius.circular(12),
                      bottomRight: Radius.circular(12),
                    ),
                    gradient: user.profileImageUrl != null
                        ? LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [
                        Colors.black.withOpacity(0.0),
                        Colors.black.withOpacity(0.6),
                      ],
                    )
                        : null,
                  ),
                  child: Row(
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text(
                              '${user.displayName ?? ''}, ${user.age}',
                              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                fontWeight: FontWeight.bold, 
                                fontSize: 16,
                                color: Colors.white,
                                shadows: [
                                  Shadow(
                                    offset: Offset(0.5, 0.5),
                                    blurRadius: 2,
                                    color: Colors.black.withOpacity(0.5),
                                  ),
                                ],
                              ),
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                Container(
                                  width: 10,
                                  height: 10,
                                  decoration: BoxDecoration(
                                    color: user.isInMeet ? Colors.green : Colors.orange,
                                    shape: BoxShape.circle,
                                    border: Border.all(
                                      color: Theme.of(context).cardColor,
                                      width: 2,
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  user.distance == 0
                                      ? 'Near by you'
                                      : '${user.distance % 1 == 0 ? user.distance.toInt() : user.distance.toStringAsFixed(1)} km away',
                                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                    color: Colors.white,
                                    fontSize: 10,
                                    shadows: [
                                      Shadow(
                                        offset: Offset(0.5, 0.5),
                                        blurRadius: 2,
                                        color: Colors.black.withOpacity(0.5),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      // const SizedBox(width: 6),
                      // Container(
                      //   width: 25,
                      //   height: 25,
                      //   decoration: BoxDecoration(
                      //     color: Colors.grey.withOpacity(0.3),
                      //     shape: BoxShape.circle,
                      //   ),
                      //   child: Icon(
                      //     Icons.star,
                      //     color: Colors.blueAccent,
                      //     size: 18,
                      //   ),
                      // ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

}